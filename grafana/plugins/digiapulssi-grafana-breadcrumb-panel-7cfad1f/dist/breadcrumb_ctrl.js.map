{"version":3,"sources":["../src/breadcrumb_ctrl.js"],"names":["_","PanelCtrl","panelDefaults","isRootDashboard","BreadcrumbCtrl","$scope","$injector","$location","backendSrv","panel","title","defaults","events","on","onInitEditMode","bind","navigate","dashboardList","windowLocation","sessionStorage","getItem","setItem","search","breadcrumb","items","split","createDashboardList","JSON","parse","updateText","window","onpopstate","event","length","state","addEditorTab","allDashboards","filterDashboardList","then","result","DBlist","allDBs","orgId","filter","filterItem","isInDatabase","findIndex","dbItem","url","indexOf","map","item","uid","find","name","params","parseParamsString","stringify","parsedBreadcrumb","index","pop","grafanaQueryParams","Object","keys","param","path","location","pathname","currentDashboard","dbSource","uri","obj","push","parseBreadcrumbForUrl","queryObject","parseParamsObject","replace","history","replaceState","paramsObj","charAt","substr","paramsArray","paramItem","paramItemArr","paramsString","paramKey","splice","queryParams","urlRoot","href","templateUrl"],"mappings":"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","file":"breadcrumb_ctrl.js","sourcesContent":["/**\n * <h3>Breadcrumb panel for Grafana</h3>\n *\n * This breadcumb panel utilizes session storage to store dashboards where user has visited.\n * When panel is loaded it first checks if breadcrumb is given in url params and utilizes that.\n * If no breadcrumb is given in url params then panel tries to read breadcrumb from session storage.\n * Finally the panel adds the just loaded dashboard as the latest item in dashboard and updates session storage.\n * Breadcrumb stores the dashboard's name, url and possible query params to the session storage.\n * If user navigates with browser back button then breadcrumb is recreated from previous url params.\n * Also if user navigates back by clicking one of the breadcrumb items then the items following the selected\n * item are removed from breadcrumb, user is moved to selected dashboard and session storage is updated.\n */\nimport _ from \"lodash\";\nimport { PanelCtrl } from \"app/plugins/sdk\";\nimport \"./breadcrumb.css!\";\nconst panelDefaults = {\n    isRootDashboard: false\n};\nclass BreadcrumbCtrl extends PanelCtrl {\n    /**\n     * Breadcrumb class constructor\n     * @param {IBreadcrumbScope} $scope Angular scope\n     * @param {ng.auto.IInjectorService} $injector Angluar injector service\n     * @param {ng.ILocationService} $location Angular location service\n     * @param {any} backendSrv Grafana backend callback\n     */\n    constructor($scope, $injector, $location, backendSrv) {\n        super($scope, $injector);\n        panelDefaults.isRootDashboard = false;\n        this.panel.title = 'Breadcrumb Panel';\n        _.defaults(this.panel, panelDefaults);\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        // Init variables\n        $scope.navigate = this.navigate.bind(this);\n        this.backendSrv = backendSrv;\n        this.dashboardList = [];\n        this.windowLocation = $location;\n        // Check for browser session storage and create one if it doesn't exist\n        if (!sessionStorage.getItem(\"dashlist\") || this.panel.isRootDashboard) {\n            sessionStorage.setItem(\"dashlist\", \"[]\");\n        }\n        // Check if URL params has breadcrumb\n        if ($location.search().breadcrumb) {\n            const items = $location.search().breadcrumb.split(\",\");\n            this.createDashboardList(items);\n        }\n        else {\n            // If no URL params are given then get dashboard list from session storage\n            this.dashboardList = JSON.parse(sessionStorage.getItem(\"dashlist\"));\n        }\n        this.updateText();\n        // Listen for PopState events so we know when user navigates back with browser\n        // On back navigation we'll take the changed breadcrumb param from url query and\n        // recreate dashboard list\n        window.onpopstate = (event) => {\n            if (this.dashboardList.length > 0) {\n                if ($location.state().breadcrumb) {\n                    const items = $location.state().breadcrumb.split(\",\");\n                    this.createDashboardList(items);\n                }\n            }\n        };\n    }\n    /**\n     * Callback for showing panel editor template\n     */\n    onInitEditMode() {\n        this.addEditorTab('Options', 'public/plugins/breadcrumb/editor.html', 2);\n    }\n    /**\n     * Create dashboard items\n     * @param {string[]} items Array of dashboard ids\n     */\n    createDashboardList(items) {\n        if (this.allDashboards) {\n            // Dashboard data has been loaeded from Grafana\n            this.filterDashboardList(items, this.allDashboards);\n        }\n        else {\n            // Fetch list of all dashboards from Grafana\n            this.backendSrv.search().then((result) => {\n                this.filterDashboardList(items, result);\n            });\n        }\n    }\n    /**\n     * Filter dashboard list\n     * @param {string[]} DBlist Array of dashboards ids to be displayed\n     * @param {any} allDBs All dashboards fetched from Grafana API\n     */\n    filterDashboardList(DBlist, allDBs) {\n        var orgId = this.windowLocation.search()[\"orgId\"];\n        this.dashboardList = DBlist.filter((filterItem) => {\n            const isInDatabase = _.findIndex(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${filterItem}`) > -1) > -1;\n            return (isInDatabase);\n        })\n            .map((item) => {\n            const uid = _.find(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${item}`) > -1).uid;\n            return {\n                url: `/d/${uid}`,\n                name: _.find(allDBs, (dbItem) => dbItem.url.indexOf(`/d/${item}`) > -1).title,\n                params: this.parseParamsString({ orgId }),\n                uid\n            };\n        });\n        // Update session storage\n        sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n    }\n    /**\n     * Parse breadcrumb string for URL\n     * @returns {string}\n     */\n    parseBreadcrumbForUrl() {\n        let parsedBreadcrumb = \"\";\n        this.dashboardList.map((item, index) => {\n            parsedBreadcrumb += item.url.split(\"/\").pop();\n            if (index < this.dashboardList.length - 1) {\n                parsedBreadcrumb += \",\";\n            }\n        });\n        return parsedBreadcrumb;\n    }\n    /**\n     * Update Breadcrumb items\n     */\n    updateText() {\n        // Get Grafana query params\n        let grafanaQueryParams = \"\";\n        Object.keys(this.windowLocation.search()).map((param) => {\n            if (this.windowLocation.search()[param] && this.windowLocation.search()[param] !== \"null\") {\n                grafanaQueryParams += \"&\" + param + \"=\" + this.windowLocation.search()[param];\n            }\n        });\n        // Fetch list of all dashboards from Grafana\n        this.backendSrv.search().then((result) => {\n            this.allDashboards = result;\n            // Set current dashboard\n            var path = window.location.pathname.split(\"/\");\n            this.currentDashboard = path.pop();\n            const dbSource = \"/d/\" + path.pop();\n            const uri = `${dbSource}`;\n            var obj = _.find(result, (dbItem) => dbItem.url.indexOf(`${uri}`) > -1);\n            // Add current dashboard to breadcrumb if it doesn't exist\n            if (_.findIndex(this.dashboardList, (dbItem) => dbItem.url.indexOf(`${uri}`) > -1) < 0 && obj) {\n                this.dashboardList.push({ url: uri, name: obj.title, params: grafanaQueryParams, uid: obj.uid });\n            }\n            // Update session storage\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n            // Parse modified breadcrumb and set it to url query params\n            const parsedBreadcrumb = this.parseBreadcrumbForUrl();\n            const queryObject = this.parseParamsObject(grafanaQueryParams);\n            queryObject[\"breadcrumb\"] = parsedBreadcrumb;\n            this.windowLocation.state(queryObject).replace();\n            history.replaceState(queryObject, \"\");\n        });\n    }\n    /**\n     * Parse params string to object\n     * @param {string} params\n     * @returns {Object}\n     */\n    parseParamsObject(params) {\n        const paramsObj = {};\n        if (params.charAt(0) === \"?\" || params.charAt(0) === \"&\") {\n            params = params.substr(1, params.length);\n        }\n        const paramsArray = params.split(\"&\");\n        paramsArray.map((paramItem) => {\n            const paramItemArr = paramItem.split(\"=\");\n            paramsObj[paramItemArr[0]] = paramItemArr[1];\n        });\n        return paramsObj;\n    }\n    /**\n     * Parse params object to string\n     * @param {Object} params\n     * @returns {string}\n     */\n    parseParamsString(params) {\n        let paramsString = \"?\";\n        Object.keys(params).map((paramKey, index) => {\n            paramsString += paramKey + \"=\" + params[paramKey];\n            if (index < Object.keys(params).length - 1) {\n                paramsString += \"&\";\n            }\n        });\n        return paramsString;\n    }\n    /**\n     * Navigate to given dashboard\n     * @param {string} url\n     */\n    navigate(url, params) {\n        // Check if user is navigating backwards in breadcrumb and\n        // remove all items that follow the selected item in that case\n        const index = _.findIndex(this.dashboardList, (dbItem) => dbItem.url.indexOf(`${url}`) > -1);\n        if (index > -1 && this.dashboardList.length >= index + 2) {\n            this.dashboardList.splice(index + 1, this.dashboardList.length - index - 1);\n            sessionStorage.setItem(\"dashlist\", JSON.stringify(this.dashboardList));\n        }\n        // Parse params string to object\n        const queryParams = this.parseParamsObject(params);\n        // Delete possible breadcrumb param so that breadcrumb from session will be used instead\n        delete queryParams[\"breadcrumb\"];\n        // Check url root assuming that Grafana dashboard url has string \"/d/\"\n        let urlRoot = window.location.href.substr(0, window.location.href.indexOf(\"/d/\") + 1);\n        if (url.charAt(0) != \"/\") {\n            urlRoot += \"/\";\n        }\n        // Set new url and notify parent window\n        window.location.href = urlRoot + url + this.parseParamsString(queryParams);\n    }\n}\nBreadcrumbCtrl.templateUrl = \"module.html\";\nexport { BreadcrumbCtrl, BreadcrumbCtrl as PanelCtrl };\n//# sourceMappingURL=breadcrumb_ctrl.js.map"]}