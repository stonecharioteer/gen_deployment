.. intro to archimedes

------------------------------------
Introduction: Why ``Archimedes``?
------------------------------------

Mechanical Engineering companies deal with a large volume of data. However, compared to retail, this
data is fundamentally different. If one were to create an analogy between a retail company where one
set of data could be everything related to a "sale", an Engineering company's data is usually never
similar in volume by number. Instead, one set of data is usually related to a customer request, which
could be a standard or adhoc request for numerical analysis on a component. This data set could be anywhere
between 1 GB to 10 TB in filesize, and there could be a few thousand such tasks every year.

Conventional methodology at Engineering companies is mostly manual when it comes to the analysis
process. Most companies follow standard processes, standard in the sense that they define. However, it is
easily observed that there is a technological gap between the processes at an Engineering company when it
comes to data management when compared to an e-retail company.

Consider this situation for example:

.. blockdiag::
    :caption: Typical Analysis Scenario

    blockdiag admin {
      default_fontsize = 10;
      span_width=30;
      span_height=35;
      default_node_color = "#c2c2c2";
      customer [numbered = 1, label = "Customer Input", color="white", textcolor="black"]
      cae [numbered = 3, label = "Computer Aided\nEngineering", color="skyblue", width=160];
      engg [numbered = 2, label = "Engineers", color="yellow"];
      srv [label = "Servers"];
      lclmc [label = "Local Machines"];
      data [numbered = 4, label = "Engineering Data", color= "red", textcolor = "white", fontsize = 14, width= 150, height=40, style=dotted];
      search [label = "Search Engine"];
      wows [label = "Work Instructions"];
      svn [label = "Version Control"];
      doe [label = "Design of Experiments\nMachine Learning", height=60];

      reports [numbered = 5, label = "Reports", color="skyblue"];
      licenses [label = "licenses", width=64];

      customer -> engg [color="blue"];
      engg -> wows;
      data -> wows [style="dotted"];
      wows -> cae [color="blue", thick];
      engg -> cae [color="blue", thick];
      cae -> lclmc [color="blue", thick];
      cae -> srv [color="blue", thick];
      srv -> data [color="blue", thick];
      lclmc -> data [color="blue", thick];
      licenses -> cae;
      data -> search;
      data -> svn;
      data -> doe;
      doe -> cae;
      data -> reports [color="blue", thick];
    }

Such a scenario would be difficult to set up in an environment which has several different varieties of
computers, servers and users. It is such, not for lack of tries. Most certainly not. Companies have constantly
put their efforts into setting up such a system, and they have come to some manner of success over the years.
Some companies choose to use readymade solutions, and there are caveats therein.


Version control, automated testing, deployment or containerization isn't usually found at mechanical
engineering companies. It is not for lack of knowledge, but mostly because engineering companies aren't
*usually* focussed on their software. They're focussed in delivering a product that doesn't fail.

This demands an analysis, or simulation process & data management system that is robust. Many CAE and CAD software
vendors are coming up with solutions, but most of them are still not widely used. The industry is plagued with
closed-source or limited-support principles, and this causes the customer to usually stop using the tools because
support is slow, or even the smallest request is usually never free. In addition, the software vendors usually
come up with certain requirements that cannot easily be met, either related to hardware or software.
Their deployment is often difficult. To add to the problem, most engineering companies are paranoid about accepting
open source technologies, concerned about the long term support and sustenance.

``Archimedes`` hopes to solve that purpose. It is a `Simulation Process Data Management System` that will
scale horizontally, that will be easy to use, and can be plugged into **any** pre-existing situation.
It is designed to be deployable with ease, intuitive to use, and can be used on any platform.

``Archimedes`` is designed so that if a component must be replaced, so be it, but it should not affect the rest
of the system. It acknowledges that this industry is used to slow change, and brings in an idealogy that is
designed around having a robust communication methodology between the old and the new.

The way we manage this is through microservices, dedicated to keeping ``Archimedes`` alive.

.. todo::
    Provide more usecase examples. Preferably illustrated.

.. toctree::
    :caption: More About Archimedes

    usecase
    microservices
    components
    deployment
    dag
    analysis_flow